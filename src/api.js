"use strict";
/**
 * EveryQA Public API
 * Documentation for EveryQA Public API # Authentication  EveryQA Public API offers only one form of authentication: - Bearer API Token
 *
 * OpenAPI spec version: 0.1
 * Contact: support@everyqa.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsersApi = exports.UsersApiFactory = exports.UsersApiFp = exports.UsersApiFetchParamCreator = exports.TestsApi = exports.TestsApiFactory = exports.TestsApiFp = exports.TestsApiFetchParamCreator = exports.RunsApi = exports.RunsApiFactory = exports.RunsApiFp = exports.RunsApiFetchParamCreator = exports.ProjectApi = exports.ProjectApiFactory = exports.ProjectApiFp = exports.ProjectApiFetchParamCreator = exports.CasesApi = exports.CasesApiFactory = exports.CasesApiFp = exports.CasesApiFetchParamCreator = exports.ActionApi = exports.ActionApiFactory = exports.ActionApiFp = exports.ActionApiFetchParamCreator = exports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = void 0;
var url = __importStar(require("url"));
var portable_fetch_1 = __importDefault(require("portable-fetch"));
var BASE_PATH = 'https://api.everyqa.io/v1'.replace(/\/+$/, '');
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ',',
    ssv: ' ',
    tsv: '\t',
    pipes: '|',
};
/**
 *
 * @export
 * @class BaseAPI
 */
var BaseAPI = /** @class */ (function () {
    function BaseAPI(configuration, basePath, fetch) {
        if (basePath === void 0) { basePath = BASE_PATH; }
        if (fetch === void 0) { fetch = portable_fetch_1.default; }
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
var RequiredError = /** @class */ (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(field, msg) {
        var _this = _super.call(this, msg) || this;
        _this.field = field;
        _this.name = 'RequiredError';
        return _this;
    }
    return RequiredError;
}(Error));
exports.RequiredError = RequiredError;
/**
 * ActionApi - fetch parameter creator
 *
 * @export
 */
exports.ActionApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Create test action by caseID
         *
         * @summary Create test action by Case ID
         * @param {string} project_id ID of project
         * @param {number} case_id ID of run
         * @param {ModelResultToTestDto} body Result Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createActionByCaseId: function (project_id, case_id, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'project_id' is not null or undefined
            if (project_id === null || project_id === undefined) {
                throw new RequiredError('project_id', 'Required parameter project_id was null or undefined when calling createActionByCaseId.');
            }
            // verify required parameter 'case_id' is not null or undefined
            if (case_id === null || case_id === undefined) {
                throw new RequiredError('case_id', 'Required parameter case_id was null or undefined when calling createActionByCaseId.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createActionByCaseId.');
            }
            var localVarPath = '/projects/{project_id}/cases/{case_id}/actions'
                .replace("{" + 'project_id' + "}", encodeURIComponent(String(project_id)))
                .replace("{" + 'case_id' + "}", encodeURIComponent(String(case_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ('ModelResultToTestDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || '');
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create test action by  testID
         *
         * @summary Create test action by Test ID
         * @param {string} project_id ID of project
         * @param {number} run_id ID of run
         * @param {number} test_id ID of test
         * @param {ModelAddActionToTestDto} body Get List of Run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createActionByTestId: function (project_id, run_id, test_id, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'project_id' is not null or undefined
            if (project_id === null || project_id === undefined) {
                throw new RequiredError('project_id', 'Required parameter project_id was null or undefined when calling createActionByTestId.');
            }
            // verify required parameter 'run_id' is not null or undefined
            if (run_id === null || run_id === undefined) {
                throw new RequiredError('run_id', 'Required parameter run_id was null or undefined when calling createActionByTestId.');
            }
            // verify required parameter 'test_id' is not null or undefined
            if (test_id === null || test_id === undefined) {
                throw new RequiredError('test_id', 'Required parameter test_id was null or undefined when calling createActionByTestId.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createActionByTestId.');
            }
            var localVarPath = '/projects/{project_id}/runs/{run_id}/tests/{test_id}/actions'
                .replace("{" + 'project_id' + "}", encodeURIComponent(String(project_id)))
                .replace("{" + 'run_id' + "}", encodeURIComponent(String(run_id)))
                .replace("{" + 'test_id' + "}", encodeURIComponent(String(test_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ('ModelAddActionToTestDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || '');
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ActionApi - functional programming interface
 *
 * @export
 */
exports.ActionApiFp = function (configuration) {
    return {
        /**
         * Create test action by caseID
         *
         * @summary Create test action by Case ID
         * @param {string} project_id ID of project
         * @param {number} case_id ID of run
         * @param {ModelResultToTestDto} body Result Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createActionByCaseId: function (project_id, case_id, body, options) {
            var localVarFetchArgs = exports.ActionApiFetchParamCreator(configuration).createActionByCaseId(project_id, case_id, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portable_fetch_1.default; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create test action by  testID
         *
         * @summary Create test action by Test ID
         * @param {string} project_id ID of project
         * @param {number} run_id ID of run
         * @param {number} test_id ID of test
         * @param {ModelAddActionToTestDto} body Get List of Run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createActionByTestId: function (project_id, run_id, test_id, body, options) {
            var localVarFetchArgs = exports.ActionApiFetchParamCreator(configuration).createActionByTestId(project_id, run_id, test_id, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portable_fetch_1.default; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * ActionApi - factory interface
 *
 * @export
 */
exports.ActionApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Create test action by caseID
         *
         * @summary Create test action by Case ID
         * @param {string} project_id ID of project
         * @param {number} case_id ID of run
         * @param {ModelResultToTestDto} body Result Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createActionByCaseId: function (project_id, case_id, body, options) {
            return exports.ActionApiFp(configuration).createActionByCaseId(project_id, case_id, body, options)(fetch, basePath);
        },
        /**
         * Create test action by  testID
         *
         * @summary Create test action by Test ID
         * @param {string} project_id ID of project
         * @param {number} run_id ID of run
         * @param {number} test_id ID of test
         * @param {ModelAddActionToTestDto} body Get List of Run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createActionByTestId: function (project_id, run_id, test_id, body, options) {
            return exports.ActionApiFp(configuration).createActionByTestId(project_id, run_id, test_id, body, options)(fetch, basePath);
        },
    };
};
/**
 * ActionApi - object-oriented interface
 *
 * @export
 * @class ActionApi
 * @extends {BaseAPI}
 */
var ActionApi = /** @class */ (function (_super) {
    __extends(ActionApi, _super);
    function ActionApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create test action by caseID
     *
     * @summary Create test action by Case ID
     * @param {string} project_id ID of project
     * @param {number} case_id ID of run
     * @param {ModelResultToTestDto} body Result Model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApi
     */
    ActionApi.prototype.createActionByCaseId = function (project_id, case_id, body, options) {
        return exports.ActionApiFp(this.configuration).createActionByCaseId(project_id, case_id, body, options)(this.fetch, this.basePath);
    };
    /**
     * Create test action by  testID
     *
     * @summary Create test action by Test ID
     * @param {string} project_id ID of project
     * @param {number} run_id ID of run
     * @param {number} test_id ID of test
     * @param {ModelAddActionToTestDto} body Get List of Run
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApi
     */
    ActionApi.prototype.createActionByTestId = function (project_id, run_id, test_id, body, options) {
        return exports.ActionApiFp(this.configuration).createActionByTestId(project_id, run_id, test_id, body, options)(this.fetch, this.basePath);
    };
    return ActionApi;
}(BaseAPI));
exports.ActionApi = ActionApi;
/**
 * CasesApi - fetch parameter creator
 *
 * @export
 */
exports.CasesApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Get list of test-run by projectID
         *
         * @summary Get list of test cases
         * @param {string} project_id ID of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCasesByProjectId: function (project_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'project_id' is not null or undefined
            if (project_id === null || project_id === undefined) {
                throw new RequiredError('project_id', 'Required parameter project_id was null or undefined when calling getAllCasesByProjectId.');
            }
            var localVarPath = '/projects/{project_id}/cases'
                .replace("{" + 'project_id' + "}", encodeURIComponent(String(project_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get test case info by caseID
         *
         * @summary Get test case info
         * @param {number} case_id ID of case to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseByCaseId: function (case_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'case_id' is not null or undefined
            if (case_id === null || case_id === undefined) {
                throw new RequiredError('case_id', 'Required parameter case_id was null or undefined when calling getCaseByCaseId.');
            }
            var localVarPath = '/projects/{project_id}/cases/{case_id}'
                .replace("{" + 'case_id' + "}", encodeURIComponent(String(case_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * CasesApi - functional programming interface
 *
 * @export
 */
exports.CasesApiFp = function (configuration) {
    return {
        /**
         * Get list of test-run by projectID
         *
         * @summary Get list of test cases
         * @param {string} project_id ID of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCasesByProjectId: function (project_id, options) {
            var localVarFetchArgs = exports.CasesApiFetchParamCreator(configuration).getAllCasesByProjectId(project_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portable_fetch_1.default; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get test case info by caseID
         *
         * @summary Get test case info
         * @param {number} case_id ID of case to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseByCaseId: function (case_id, options) {
            var localVarFetchArgs = exports.CasesApiFetchParamCreator(configuration).getCaseByCaseId(case_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portable_fetch_1.default; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * CasesApi - factory interface
 *
 * @export
 */
exports.CasesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Get list of test-run by projectID
         *
         * @summary Get list of test cases
         * @param {string} project_id ID of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCasesByProjectId: function (project_id, options) {
            return exports.CasesApiFp(configuration).getAllCasesByProjectId(project_id, options)(fetch, basePath);
        },
        /**
         * Get test case info by caseID
         *
         * @summary Get test case info
         * @param {number} case_id ID of case to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseByCaseId: function (case_id, options) {
            return exports.CasesApiFp(configuration).getCaseByCaseId(case_id, options)(fetch, basePath);
        },
    };
};
/**
 * CasesApi - object-oriented interface
 *
 * @export
 * @class CasesApi
 * @extends {BaseAPI}
 */
var CasesApi = /** @class */ (function (_super) {
    __extends(CasesApi, _super);
    function CasesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get list of test-run by projectID
     *
     * @summary Get list of test cases
     * @param {string} project_id ID of project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    CasesApi.prototype.getAllCasesByProjectId = function (project_id, options) {
        return exports.CasesApiFp(this.configuration).getAllCasesByProjectId(project_id, options)(this.fetch, this.basePath);
    };
    /**
     * Get test case info by caseID
     *
     * @summary Get test case info
     * @param {number} case_id ID of case to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    CasesApi.prototype.getCaseByCaseId = function (case_id, options) {
        return exports.CasesApiFp(this.configuration).getCaseByCaseId(case_id, options)(this.fetch, this.basePath);
    };
    return CasesApi;
}(BaseAPI));
exports.CasesApi = CasesApi;
/**
 * ProjectApi - fetch parameter creator
 *
 * @export
 */
exports.ProjectApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Get project info by projectID
         *
         * @summary Get project info
         * @param {string} project_id ID of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectById: function (project_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'project_id' is not null or undefined
            if (project_id === null || project_id === undefined) {
                throw new RequiredError('project_id', 'Required parameter project_id was null or undefined when calling getProjectById.');
            }
            var localVarPath = '/projects/{project_id}'
                .replace("{" + 'project_id' + "}", encodeURIComponent(String(project_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ProjectApi - functional programming interface
 *
 * @export
 */
exports.ProjectApiFp = function (configuration) {
    return {
        /**
         * Get project info by projectID
         *
         * @summary Get project info
         * @param {string} project_id ID of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectById: function (project_id, options) {
            var localVarFetchArgs = exports.ProjectApiFetchParamCreator(configuration).getProjectById(project_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portable_fetch_1.default; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * ProjectApi - factory interface
 *
 * @export
 */
exports.ProjectApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Get project info by projectID
         *
         * @summary Get project info
         * @param {string} project_id ID of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectById: function (project_id, options) {
            return exports.ProjectApiFp(configuration).getProjectById(project_id, options)(fetch, basePath);
        },
    };
};
/**
 * ProjectApi - object-oriented interface
 *
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
var ProjectApi = /** @class */ (function (_super) {
    __extends(ProjectApi, _super);
    function ProjectApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get project info by projectID
     *
     * @summary Get project info
     * @param {string} project_id ID of project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    ProjectApi.prototype.getProjectById = function (project_id, options) {
        return exports.ProjectApiFp(this.configuration).getProjectById(project_id, options)(this.fetch, this.basePath);
    };
    return ProjectApi;
}(BaseAPI));
exports.ProjectApi = ProjectApi;
/**
 * RunsApi - fetch parameter creator
 *
 * @export
 */
exports.RunsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Close test run
         *
         * @summary Close test run
         * @param {string} project_id ID of project
         * @param {number} run_id ID of run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeRunById: function (project_id, run_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'project_id' is not null or undefined
            if (project_id === null || project_id === undefined) {
                throw new RequiredError('project_id', 'Required parameter project_id was null or undefined when calling closeRunById.');
            }
            // verify required parameter 'run_id' is not null or undefined
            if (run_id === null || run_id === undefined) {
                throw new RequiredError('run_id', 'Required parameter run_id was null or undefined when calling closeRunById.');
            }
            var localVarPath = '/projects/{project_id}/runs/{run_id}/close'
                .replace("{" + 'project_id' + "}", encodeURIComponent(String(project_id)))
                .replace("{" + 'run_id' + "}", encodeURIComponent(String(run_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create test run
         *
         * @summary Create test run
         * @param {string} project_id ID of project
         * @param {TestrunCreateTestRunDto} body Close Run Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRun: function (project_id, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'project_id' is not null or undefined
            if (project_id === null || project_id === undefined) {
                throw new RequiredError('project_id', 'Required parameter project_id was null or undefined when calling createRun.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createRun.');
            }
            var localVarPath = '/projects/{project_id}/runs'
                .replace("{" + 'project_id' + "}", encodeURIComponent(String(project_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ('TestrunCreateTestRunDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || '');
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of test-run by projectID
         *
         * @summary Get list of test-run
         * @param {string} project_id ID of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRunsByProjectId: function (project_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'project_id' is not null or undefined
            if (project_id === null || project_id === undefined) {
                throw new RequiredError('project_id', 'Required parameter project_id was null or undefined when calling getAllRunsByProjectId.');
            }
            var localVarPath = '/projects/{project_id}/runs'
                .replace("{" + 'project_id' + "}", encodeURIComponent(String(project_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get run info by ID
         *
         * @summary Get run info by ID
         * @param {string} project_id ID of project
         * @param {number} run_id ID of run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunById: function (project_id, run_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'project_id' is not null or undefined
            if (project_id === null || project_id === undefined) {
                throw new RequiredError('project_id', 'Required parameter project_id was null or undefined when calling getRunById.');
            }
            // verify required parameter 'run_id' is not null or undefined
            if (run_id === null || run_id === undefined) {
                throw new RequiredError('run_id', 'Required parameter run_id was null or undefined when calling getRunById.');
            }
            var localVarPath = '/projects/{project_id}/runs/{run_id}'
                .replace("{" + 'project_id' + "}", encodeURIComponent(String(project_id)))
                .replace("{" + 'run_id' + "}", encodeURIComponent(String(run_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update test-run info by ID
         *
         * @summary Update test-run info
         * @param {string} project_id ID of project
         * @param {number} run_id ID of run
         * @param {TestrunUpdateRunDto} body Update Run Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRunById: function (project_id, run_id, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'project_id' is not null or undefined
            if (project_id === null || project_id === undefined) {
                throw new RequiredError('project_id', 'Required parameter project_id was null or undefined when calling updateRunById.');
            }
            // verify required parameter 'run_id' is not null or undefined
            if (run_id === null || run_id === undefined) {
                throw new RequiredError('run_id', 'Required parameter run_id was null or undefined when calling updateRunById.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateRunById.');
            }
            var localVarPath = '/projects/{project_id}/runs/{run_id}'
                .replace("{" + 'project_id' + "}", encodeURIComponent(String(project_id)))
                .replace("{" + 'run_id' + "}", encodeURIComponent(String(run_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ('TestrunUpdateRunDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || '');
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * RunsApi - functional programming interface
 *
 * @export
 */
exports.RunsApiFp = function (configuration) {
    return {
        /**
         * Close test run
         *
         * @summary Close test run
         * @param {string} project_id ID of project
         * @param {number} run_id ID of run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeRunById: function (project_id, run_id, options) {
            var localVarFetchArgs = exports.RunsApiFetchParamCreator(configuration).closeRunById(project_id, run_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portable_fetch_1.default; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create test run
         *
         * @summary Create test run
         * @param {string} project_id ID of project
         * @param {TestrunCreateTestRunDto} body Close Run Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRun: function (project_id, body, options) {
            var localVarFetchArgs = exports.RunsApiFetchParamCreator(configuration).createRun(project_id, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portable_fetch_1.default; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get list of test-run by projectID
         *
         * @summary Get list of test-run
         * @param {string} project_id ID of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRunsByProjectId: function (project_id, options) {
            var localVarFetchArgs = exports.RunsApiFetchParamCreator(configuration).getAllRunsByProjectId(project_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portable_fetch_1.default; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get run info by ID
         *
         * @summary Get run info by ID
         * @param {string} project_id ID of project
         * @param {number} run_id ID of run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunById: function (project_id, run_id, options) {
            var localVarFetchArgs = exports.RunsApiFetchParamCreator(configuration).getRunById(project_id, run_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portable_fetch_1.default; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update test-run info by ID
         *
         * @summary Update test-run info
         * @param {string} project_id ID of project
         * @param {number} run_id ID of run
         * @param {TestrunUpdateRunDto} body Update Run Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRunById: function (project_id, run_id, body, options) {
            var localVarFetchArgs = exports.RunsApiFetchParamCreator(configuration).updateRunById(project_id, run_id, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portable_fetch_1.default; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * RunsApi - factory interface
 *
 * @export
 */
exports.RunsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Close test run
         *
         * @summary Close test run
         * @param {string} project_id ID of project
         * @param {number} run_id ID of run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeRunById: function (project_id, run_id, options) {
            return exports.RunsApiFp(configuration).closeRunById(project_id, run_id, options)(fetch, basePath);
        },
        /**
         * Create test run
         *
         * @summary Create test run
         * @param {string} project_id ID of project
         * @param {TestrunCreateTestRunDto} body Close Run Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRun: function (project_id, body, options) {
            return exports.RunsApiFp(configuration).createRun(project_id, body, options)(fetch, basePath);
        },
        /**
         * Get list of test-run by projectID
         *
         * @summary Get list of test-run
         * @param {string} project_id ID of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRunsByProjectId: function (project_id, options) {
            return exports.RunsApiFp(configuration).getAllRunsByProjectId(project_id, options)(fetch, basePath);
        },
        /**
         * Get run info by ID
         *
         * @summary Get run info by ID
         * @param {string} project_id ID of project
         * @param {number} run_id ID of run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunById: function (project_id, run_id, options) {
            return exports.RunsApiFp(configuration).getRunById(project_id, run_id, options)(fetch, basePath);
        },
        /**
         * Update test-run info by ID
         *
         * @summary Update test-run info
         * @param {string} project_id ID of project
         * @param {number} run_id ID of run
         * @param {TestrunUpdateRunDto} body Update Run Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRunById: function (project_id, run_id, body, options) {
            return exports.RunsApiFp(configuration).updateRunById(project_id, run_id, body, options)(fetch, basePath);
        },
    };
};
/**
 * RunsApi - object-oriented interface
 *
 * @export
 * @class RunsApi
 * @extends {BaseAPI}
 */
var RunsApi = /** @class */ (function (_super) {
    __extends(RunsApi, _super);
    function RunsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Close test run
     *
     * @summary Close test run
     * @param {string} project_id ID of project
     * @param {number} run_id ID of run
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    RunsApi.prototype.closeRunById = function (project_id, run_id, options) {
        return exports.RunsApiFp(this.configuration).closeRunById(project_id, run_id, options)(this.fetch, this.basePath);
    };
    /**
     * Create test run
     *
     * @summary Create test run
     * @param {string} project_id ID of project
     * @param {TestrunCreateTestRunDto} body Close Run Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    RunsApi.prototype.createRun = function (project_id, body, options) {
        return exports.RunsApiFp(this.configuration).createRun(project_id, body, options)(this.fetch, this.basePath);
    };
    /**
     * Get list of test-run by projectID
     *
     * @summary Get list of test-run
     * @param {string} project_id ID of project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    RunsApi.prototype.getAllRunsByProjectId = function (project_id, options) {
        return exports.RunsApiFp(this.configuration).getAllRunsByProjectId(project_id, options)(this.fetch, this.basePath);
    };
    /**
     * Get run info by ID
     *
     * @summary Get run info by ID
     * @param {string} project_id ID of project
     * @param {number} run_id ID of run
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    RunsApi.prototype.getRunById = function (project_id, run_id, options) {
        return exports.RunsApiFp(this.configuration).getRunById(project_id, run_id, options)(this.fetch, this.basePath);
    };
    /**
     * Update test-run info by ID
     *
     * @summary Update test-run info
     * @param {string} project_id ID of project
     * @param {number} run_id ID of run
     * @param {TestrunUpdateRunDto} body Update Run Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    RunsApi.prototype.updateRunById = function (project_id, run_id, body, options) {
        return exports.RunsApiFp(this.configuration).updateRunById(project_id, run_id, body, options)(this.fetch, this.basePath);
    };
    return RunsApi;
}(BaseAPI));
exports.RunsApi = RunsApi;
/**
 * TestsApi - fetch parameter creator
 *
 * @export
 */
exports.TestsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Create test by caseID
         *
         * @summary Create test in run
         * @param {number} project_id ID of project
         * @param {number} run_id ID of run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestByCaseId: function (project_id, run_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'project_id' is not null or undefined
            if (project_id === null || project_id === undefined) {
                throw new RequiredError('project_id', 'Required parameter project_id was null or undefined when calling createTestByCaseId.');
            }
            // verify required parameter 'run_id' is not null or undefined
            if (run_id === null || run_id === undefined) {
                throw new RequiredError('run_id', 'Required parameter run_id was null or undefined when calling createTestByCaseId.');
            }
            var localVarPath = '/projects/{project_id}/runs/{run_id}/tests'
                .replace("{" + 'project_id' + "}", encodeURIComponent(String(project_id)))
                .replace("{" + 'run_id' + "}", encodeURIComponent(String(run_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get tests list by RunId
         *
         * @summary Get list of tests in test run
         * @param {number} run_id ID of run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestsListByRunId: function (project_id, run_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'run_id' is not null or undefined
            if (run_id === null || run_id === undefined) {
                throw new RequiredError('run_id', 'Required parameter run_id was null or undefined when calling getTestsListByRunId.');
            }
            var localVarPath = '/projects/{project_id}/runs/{run_id}/tests'
                .replace("{" + 'run_id' + "}", encodeURIComponent(String(run_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * TestsApi - functional programming interface
 *
 * @export
 */
exports.TestsApiFp = function (configuration) {
    return {
        /**
         * Create test by caseID
         *
         * @summary Create test in run
         * @param {number} project_id ID of project
         * @param {number} run_id ID of run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestByCaseId: function (project_id, run_id, options) {
            var localVarFetchArgs = exports.TestsApiFetchParamCreator(configuration).createTestByCaseId(project_id, run_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portable_fetch_1.default; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get tests list by RunId
         *
         * @summary Get list of tests in test run
         * @param {number} run_id ID of run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestsListByRunId: function (run_id, options) {
            var localVarFetchArgs = exports.TestsApiFetchParamCreator(configuration).getTestsListByRunId(run_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portable_fetch_1.default; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * TestsApi - factory interface
 *
 * @export
 */
exports.TestsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Create test by caseID
         *
         * @summary Create test in run
         * @param {number} project_id ID of project
         * @param {number} run_id ID of run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestByCaseId: function (project_id, run_id, options) {
            return exports.TestsApiFp(configuration).createTestByCaseId(project_id, run_id, options)(fetch, basePath);
        },
        /**
         * Get tests list by RunId
         *
         * @summary Get list of tests in test run
         * @param {number} run_id ID of run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestsListByRunId: function (run_id, options) {
            return exports.TestsApiFp(configuration).getTestsListByRunId(run_id, options)(fetch, basePath);
        },
    };
};
/**
 * TestsApi - object-oriented interface
 *
 * @export
 * @class TestsApi
 * @extends {BaseAPI}
 */
var TestsApi = /** @class */ (function (_super) {
    __extends(TestsApi, _super);
    function TestsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create test by caseID
     *
     * @summary Create test in run
     * @param {number} project_id ID of project
     * @param {number} run_id ID of run
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestsApi
     */
    TestsApi.prototype.createTestByCaseId = function (project_id, run_id, options) {
        return exports.TestsApiFp(this.configuration).createTestByCaseId(project_id, run_id, options)(this.fetch, this.basePath);
    };
    /**
     * Get tests list by RunId
     *
     * @summary Get list of tests in test run
     * @param {number} run_id ID of run
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestsApi
     */
    TestsApi.prototype.getTestsListByRunId = function (run_id, options) {
        return exports.TestsApiFp(this.configuration).getTestsListByRunId(run_id, options)(this.fetch, this.basePath);
    };
    return TestsApi;
}(BaseAPI));
exports.TestsApi = TestsApi;
/**
 * UsersApi - fetch parameter creator
 *
 * @export
 */
exports.UsersApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Get current user info
         *
         * @summary Get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        user: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = '/users';
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user info by ID
         *
         * @summary Get user by ID
         * @param {number} user_id ID of user to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userById: function (user_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'user_id' is not null or undefined
            if (user_id === null || user_id === undefined) {
                throw new RequiredError('user_id', 'Required parameter user_id was null or undefined when calling userById.');
            }
            var localVarPath = '/users/{user_id}'
                .replace("{" + 'user_id' + "}", encodeURIComponent(String(user_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * UsersApi - functional programming interface
 *
 * @export
 */
exports.UsersApiFp = function (configuration) {
    return {
        /**
         * Get current user info
         *
         * @summary Get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        user: function (options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).user(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portable_fetch_1.default; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get user info by ID
         *
         * @summary Get user by ID
         * @param {number} user_id ID of user to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userById: function (user_id, options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).userById(user_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portable_fetch_1.default; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * UsersApi - factory interface
 *
 * @export
 */
exports.UsersApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Get current user info
         *
         * @summary Get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        user: function (options) {
            return exports.UsersApiFp(configuration).user(options)(fetch, basePath);
        },
        /**
         * Get user info by ID
         *
         * @summary Get user by ID
         * @param {number} user_id ID of user to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userById: function (user_id, options) {
            return exports.UsersApiFp(configuration).userById(user_id, options)(fetch, basePath);
        },
    };
};
/**
 * UsersApi - object-oriented interface
 *
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
var UsersApi = /** @class */ (function (_super) {
    __extends(UsersApi, _super);
    function UsersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get current user info
     *
     * @summary Get current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.user = function (options) {
        return exports.UsersApiFp(this.configuration).user(options)(this.fetch, this.basePath);
    };
    /**
     * Get user info by ID
     *
     * @summary Get user by ID
     * @param {number} user_id ID of user to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.userById = function (user_id, options) {
        return exports.UsersApiFp(this.configuration).userById(user_id, options)(this.fetch, this.basePath);
    };
    return UsersApi;
}(BaseAPI));
exports.UsersApi = UsersApi;
//# sourceMappingURL=api.js.map