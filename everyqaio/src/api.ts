/// <reference path="./custom.d.ts" />
/* eslint-disable */
/**
 * EveryQA Public API
 * Documentation for EveryQA Public API # Authentication
 * EveryQA Public API offers only one form of authentication: - Bearer API Token
 *
 * OpenAPI spec version: 0.1
 * Contact: support@everyqa.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as portableFetch from 'portable-fetch';
import * as url from 'url';
import { Configuration } from './configuration';

const BASE_PATH = 'https://api.everyqa.io/v1'.replace(/\/+$/, '');

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ',',
    ssv: ' ',
    tsv: '\t',
    pipes: '|',
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export type FetchAPI = (url: string, init?: any) => Promise<Response>;

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration = {};
    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: string = 'RequiredError';
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 *
 * @export
 * @interface ActionAction
 */
export interface ActionAction {
    /**
     *
     * @type {number}
     * @memberof ActionAction
     */
    createdAt?: number;
    /**
     *
     * @type {string}
     * @memberof ActionAction
     */
    createdBy?: string;
    /**
     *
     * @type {number}
     * @memberof ActionAction
     */
    deletedAt?: number;
    /**
     *
     * @type {number}
     * @memberof ActionAction
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof ActionAction
     */
    notes?: string;
    /**
     *
     * @type {number}
     * @memberof ActionAction
     */
    statusId?: number;
    /**
     *
     * @type {number}
     * @memberof ActionAction
     */
    testId?: number;
    /**
     *
     * @type {number}
     * @memberof ActionAction
     */
    updatedAt?: number;
}

/**
 *
 * @export
 * @interface ExecutionExecution
 */
export interface ExecutionExecution {
    /**
     *
     * @type {string}
     * @memberof ExecutionExecution
     */
    assignedTo?: string;
    /**
     *
     * @type {number}
     * @memberof ExecutionExecution
     */
    caseId?: number;
    /**
     *
     * @type {string}
     * @memberof ExecutionExecution
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ExecutionExecution
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof ExecutionExecution
     */
    deletedAt?: string;
    /**
     *
     * @type {number}
     * @memberof ExecutionExecution
     */
    estimate?: number;
    /**
     *
     * @type {string}
     * @memberof ExecutionExecution
     */
    expectedResult?: string;
    /**
     *
     * @type {number}
     * @memberof ExecutionExecution
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionExecution
     */
    innerId?: number;
    /**
     *
     * @type {string}
     * @memberof ExecutionExecution
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ExecutionExecution
     */
    networkId?: string;
    /**
     *
     * @type {number}
     * @memberof ExecutionExecution
     */
    order?: number;
    /**
     *
     * @type {string}
     * @memberof ExecutionExecution
     */
    preconditions?: string;
    /**
     *
     * @type {string}
     * @memberof ExecutionExecution
     */
    priority?: string;
    /**
     *
     * @type {string}
     * @memberof ExecutionExecution
     */
    projectId?: string;
    /**
     *
     * @type {number}
     * @memberof ExecutionExecution
     */
    runId?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionExecution
     */
    sectionId?: number;
    /**
     *
     * @type {string}
     * @memberof ExecutionExecution
     */
    statusChangedAt?: string;
    /**
     *
     * @type {number}
     * @memberof ExecutionExecution
     */
    statusId?: number;
    /**
     *
     * @type {Array<TestcaseCaseStep>}
     * @memberof ExecutionExecution
     */
    steps?: TestcaseCaseStep[];
    /**
     *
     * @type {string}
     * @memberof ExecutionExecution
     */
    updatedAt?: string;
}

/**
 *
 * @export
 * @interface ModelAPIError
 */
export interface ModelAPIError {
    /**
     *
     * @type {string}
     * @memberof ModelAPIError
     */
    message?: string;
    /**
     *
     * @type {string}
     * @memberof ModelAPIError
     */
    status?: string;
}

/**
 *
 * @export
 * @interface ModelAddActionToTestDto
 */
export interface ModelAddActionToTestDto {
    /**
     *
     * @type {string}
     * @memberof ModelAddActionToTestDto
     */
    notes?: string;
    /**
     *
     * @type {number}
     * @memberof ModelAddActionToTestDto
     */
    statusId?: number;
}

/**
 *
 * @export
 * @interface ModelResultToTestDto
 */
export interface ModelResultToTestDto {
    /**
     *
     * @type {number}
     * @memberof ModelResultToTestDto
     */
    caseId?: number;
    /**
     *
     * @type {string}
     * @memberof ModelResultToTestDto
     */
    notes?: string;
    /**
     *
     * @type {number}
     * @memberof ModelResultToTestDto
     */
    statusId?: number;
}

/**
 *
 * @export
 * @interface ProjectProjectDto
 */
export interface ProjectProjectDto {
    /**
     *
     * @type {string}
     * @memberof ProjectProjectDto
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ProjectProjectDto
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ProjectProjectDto
     */
    networkId?: string;
    /**
     *
     * @type {string}
     * @memberof ProjectProjectDto
     */
    sprintType?: string;
    /**
     *
     * @type {string}
     * @memberof ProjectProjectDto
     */
    type?: string;
}

/**
 *
 * @export
 * @interface TestcaseCase
 */
export interface TestcaseCase {
    /**
     *
     * @type {string}
     * @memberof TestcaseCase
     */
    author?: string;
    /**
     *
     * @type {string}
     * @memberof TestcaseCase
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof TestcaseCase
     */
    deletedAt?: string;
    /**
     *
     * @type {number}
     * @memberof TestcaseCase
     */
    estimate?: number;
    /**
     *
     * @type {string}
     * @memberof TestcaseCase
     */
    expectedResult?: string;
    /**
     *
     * @type {number}
     * @memberof TestcaseCase
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof TestcaseCase
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof TestcaseCase
     */
    networkId?: string;
    /**
     *
     * @type {number}
     * @memberof TestcaseCase
     */
    order?: number;
    /**
     *
     * @type {string}
     * @memberof TestcaseCase
     */
    preconditions?: string;
    /**
     *
     * @type {string}
     * @memberof TestcaseCase
     */
    priority?: string;
    /**
     *
     * @type {string}
     * @memberof TestcaseCase
     */
    projectId?: string;
    /**
     *
     * @type {number}
     * @memberof TestcaseCase
     */
    sectionId?: number;
    /**
     *
     * @type {Array<TestcaseCaseStep>}
     * @memberof TestcaseCase
     */
    steps?: TestcaseCaseStep[];
    /**
     *
     * @type {string}
     * @memberof TestcaseCase
     */
    updatedAt?: string;
}

/**
 *
 * @export
 * @interface TestcaseCaseStep
 */
export interface TestcaseCaseStep {
    /**
     *
     * @type {string}
     * @memberof TestcaseCaseStep
     */
    desc?: string;
    /**
     *
     * @type {string}
     * @memberof TestcaseCaseStep
     */
    expectedResult?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof TestcaseCaseStep
     */
    imgSrc?: string[];
}

/**
 *
 * @export
 * @interface TestrunCreateTestRunDto
 */
export interface TestrunCreateTestRunDto {
    /**
     *
     * @type {string}
     * @memberof TestrunCreateTestRunDto
     */
    assignTo?: string;
    /**
     *
     * @type {string}
     * @memberof TestrunCreateTestRunDto
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof TestrunCreateTestRunDto
     */
    sprintId?: string;
}

/**
 *
 * @export
 * @interface TestrunTestRun
 */
export interface TestrunTestRun {
    /**
     *
     * @type {string}
     * @memberof TestrunTestRun
     */
    assignedTo?: string;
    /**
     *
     * @type {string}
     * @memberof TestrunTestRun
     */
    completedAt?: string;
    /**
     *
     * @type {string}
     * @memberof TestrunTestRun
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof TestrunTestRun
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof TestrunTestRun
     */
    deletedAt?: string;
    /**
     *
     * @type {number}
     * @memberof TestrunTestRun
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof TestrunTestRun
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof TestrunTestRun
     */
    networkId?: string;
    /**
     *
     * @type {string}
     * @memberof TestrunTestRun
     */
    projectId?: string;
    /**
     *
     * @type {string}
     * @memberof TestrunTestRun
     */
    sprintId?: string;
    /**
     *
     * @type {string}
     * @memberof TestrunTestRun
     */
    status?: string;
    /**
     *
     * @type {string}
     * @memberof TestrunTestRun
     */
    updatedAt?: string;
}

/**
 *
 * @export
 * @interface TestrunUpdateRunDto
 */
export interface TestrunUpdateRunDto {
    /**
     *
     * @type {string}
     * @memberof TestrunUpdateRunDto
     */
    assignTo?: string;
    /**
     *
     * @type {string}
     * @memberof TestrunUpdateRunDto
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof TestrunUpdateRunDto
     */
    sprintId?: string;
    /**
     *
     * @type {string}
     * @memberof TestrunUpdateRunDto
     */
    status?: string;
}

/**
 *
 * @export
 * @interface UserUser
 */
export interface UserUser {
    /**
     *
     * @type {string}
     * @memberof UserUser
     */
    created?: string;
    /**
     *
     * @type {string}
     * @memberof UserUser
     */
    firstName?: string;
    /**
     *
     * @type {boolean}
     * @memberof UserUser
     */
    isActive?: boolean;
    /**
     *
     * @type {string}
     * @memberof UserUser
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof UserUser
     */
    networkId?: string;
    /**
     *
     * @type {number}
     * @memberof UserUser
     */
    roleId?: number;
    /**
     *
     * @type {string}
     * @memberof UserUser
     */
    userId?: string;
}


/**
 * ActionApi - fetch parameter creator
 *
 * @export
 */
export const ActionApiFetchParamCreator = function(configuration?: Configuration) {
    return {
        /**
         * Create test action by caseID
         *
         * @summary Create test action by Case ID
         * @param {ModelResultToTestDto} body Result Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createActionByCaseId(body: ModelResultToTestDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createActionByCaseId.');
            }
            const localVarPath = '/actions';
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>'ModelResultToTestDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || '');

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create test action by  testID
         *
         * @summary Create test action by Test ID
         * @param {string} projectId ID of project
         * @param {number} runId ID of run
         * @param {number} testId ID of test
         * @param {ModelAddActionToTestDto} body Get List of Run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createActionByTestId(projectId: string, runId: number, testId: number, body: ModelAddActionToTestDto, options: any = {}): FetchArgs {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling createActionByTestId.');
            }
            // verify required parameter 'runId' is not null or undefined
            if (runId === null || runId === undefined) {
                throw new RequiredError('runId','Required parameter runId was null or undefined when calling createActionByTestId.');
            }
            // verify required parameter 'testId' is not null or undefined
            if (testId === null || testId === undefined) {
                throw new RequiredError('testId','Required parameter testId was null or undefined when calling createActionByTestId.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createActionByTestId.');
            }
            const localVarPath = '/projects/{project_id}/runs/{run_id}/tests/{test_id}/actions'
                .replace(`{${'project_id'}}`, encodeURIComponent(String(projectId)))
                .replace(`{${'run_id'}}`, encodeURIComponent(String(runId)))
                .replace(`{${'test_id'}}`, encodeURIComponent(String(testId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>'ModelAddActionToTestDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || '');

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * ActionApi - functional programming interface
 *
 * @export
 */
export const ActionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create test action by caseID
         *
         * @summary Create test action by Case ID
         * @param {ModelResultToTestDto} body Result Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createActionByCaseId(body: ModelResultToTestDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ActionAction> {
            const localVarFetchArgs = ActionApiFetchParamCreator(configuration).createActionByCaseId(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Create test action by  testID
         *
         * @summary Create test action by Test ID
         * @param {string} projectId ID of project
         * @param {number} runId ID of run
         * @param {number} testId ID of test
         * @param {ModelAddActionToTestDto} body Get List of Run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createActionByTestId(projectId: string, runId: number, testId: number, body: ModelAddActionToTestDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ActionAction> {
            const localVarFetchArgs = ActionApiFetchParamCreator(configuration).createActionByTestId(projectId, runId, testId, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    };
};

/**
 * ActionApi - factory interface
 *
 * @export
 */
export const ActionApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Create test action by caseID
         *
         * @summary Create test action by Case ID
         * @param {ModelResultToTestDto} body Result Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createActionByCaseId(body: ModelResultToTestDto, options?: any) {
            return ActionApiFp(configuration).createActionByCaseId(body, options)(fetch, basePath);
        },
        /**
         * Create test action by  testID
         *
         * @summary Create test action by Test ID
         * @param {string} projectId ID of project
         * @param {number} runId ID of run
         * @param {number} testId ID of test
         * @param {ModelAddActionToTestDto} body Get List of Run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createActionByTestId(projectId: string, runId: number, testId: number, body: ModelAddActionToTestDto, options?: any) {
            return ActionApiFp(configuration).createActionByTestId(projectId, runId, testId, body, options)(fetch, basePath);
        },
    };
};

/**
 * ActionApi - object-oriented interface
 *
 * @export
 * @class ActionApi
 * @extends {BaseAPI}
 */
export class ActionApi extends BaseAPI {
    /**
     * Create test action by caseID
     *
     * @summary Create test action by Case ID
     * @param {ModelResultToTestDto} body Result Model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApi
     */
    public createActionByCaseId(body: ModelResultToTestDto, options?: any) {
        return ActionApiFp(this.configuration).createActionByCaseId(body, options)(this.fetch, this.basePath);
    }

    /**
     * Create test action by  testID
     *
     * @summary Create test action by Test ID
     * @param {string} projectId ID of project
     * @param {number} runId ID of run
     * @param {number} testId ID of test
     * @param {ModelAddActionToTestDto} body Get List of Run
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApi
     */
    public createActionByTestId(projectId: string, runId: number, testId: number, body: ModelAddActionToTestDto, options?: any) {
        return ActionApiFp(this.configuration).createActionByTestId(projectId, runId, testId, body, options)(this.fetch, this.basePath);
    }

}

/**
 * CasesApi - fetch parameter creator
 *
 * @export
 */
export const CasesApiFetchParamCreator = function(configuration?: Configuration) {
    return {
        /**
         * Get list of test-run by projectID
         *
         * @summary Get list of test cases
         * @param {string} projectId ID of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCasesByProjectId(projectId: string, options: any = {}): FetchArgs {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getAllCasesByProjectId.');
            }
            const localVarPath = '/projects/{project_id}/cases'
                .replace(`{${'project_id'}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get test case info by caseID
         *
         * @summary Get test case info
         * @param {number} caseId ID of case to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseByCaseId(caseId: number, options: any = {}): FetchArgs {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling getCaseByCaseId.');
            }
            const localVarPath = '/projects/{project_id}/cases/{case_id}'
                .replace(`{${'case_id'}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * CasesApi - functional programming interface
 *
 * @export
 */
export const CasesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get list of test-run by projectID
         *
         * @summary Get list of test cases
         * @param {string} projectId ID of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCasesByProjectId(projectId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TestcaseCase[]> {
            const localVarFetchArgs = CasesApiFetchParamCreator(configuration).getAllCasesByProjectId(projectId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get test case info by caseID
         *
         * @summary Get test case info
         * @param {number} caseId ID of case to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseByCaseId(caseId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TestcaseCase> {
            const localVarFetchArgs = CasesApiFetchParamCreator(configuration).getCaseByCaseId(caseId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    };
};

/**
 * CasesApi - factory interface
 *
 * @export
 */
export const CasesApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get list of test-run by projectID
         *
         * @summary Get list of test cases
         * @param {string} projectId ID of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCasesByProjectId(projectId: string, options?: any) {
            return CasesApiFp(configuration).getAllCasesByProjectId(projectId, options)(fetch, basePath);
        },
        /**
         * Get test case info by caseID
         *
         * @summary Get test case info
         * @param {number} caseId ID of case to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseByCaseId(caseId: number, options?: any) {
            return CasesApiFp(configuration).getCaseByCaseId(caseId, options)(fetch, basePath);
        },
    };
};

/**
 * CasesApi - object-oriented interface
 *
 * @export
 * @class CasesApi
 * @extends {BaseAPI}
 */
export class CasesApi extends BaseAPI {
    /**
     * Get list of test-run by projectID
     *
     * @summary Get list of test cases
     * @param {string} projectId ID of project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    public getAllCasesByProjectId(projectId: string, options?: any) {
        return CasesApiFp(this.configuration).getAllCasesByProjectId(projectId, options)(this.fetch, this.basePath);
    }

    /**
     * Get test case info by caseID
     *
     * @summary Get test case info
     * @param {number} caseId ID of case to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    public getCaseByCaseId(caseId: number, options?: any) {
        return CasesApiFp(this.configuration).getCaseByCaseId(caseId, options)(this.fetch, this.basePath);
    }

}

/**
 * ProjectApi - fetch parameter creator
 *
 * @export
 */
export const ProjectApiFetchParamCreator = function(configuration?: Configuration) {
    return {
        /**
         * Get project info by projectID
         *
         * @summary Get project info
         * @param {string} projectId ID of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectById(projectId: string, options: any = {}): FetchArgs {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getProjectById.');
            }
            const localVarPath = '/projects/{project_id}'
                .replace(`{${'project_id'}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * ProjectApi - functional programming interface
 *
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get project info by projectID
         *
         * @summary Get project info
         * @param {string} projectId ID of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectById(projectId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProjectProjectDto> {
            const localVarFetchArgs = ProjectApiFetchParamCreator(configuration).getProjectById(projectId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    };
};

/**
 * ProjectApi - factory interface
 *
 * @export
 */
export const ProjectApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get project info by projectID
         *
         * @summary Get project info
         * @param {string} projectId ID of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectById(projectId: string, options?: any) {
            return ProjectApiFp(configuration).getProjectById(projectId, options)(fetch, basePath);
        },
    };
};

/**
 * ProjectApi - object-oriented interface
 *
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
    /**
     * Get project info by projectID
     *
     * @summary Get project info
     * @param {string} projectId ID of project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProjectById(projectId: string, options?: any) {
        return ProjectApiFp(this.configuration).getProjectById(projectId, options)(this.fetch, this.basePath);
    }

}

/**
 * RunsApi - fetch parameter creator
 *
 * @export
 */
export const RunsApiFetchParamCreator = function(configuration?: Configuration) {
    return {
        /**
         * Close test run
         *
         * @summary Close test run
         * @param {string} projectId ID of project
         * @param {number} runId ID of run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeRunById(projectId: string, runId: number, options: any = {}): FetchArgs {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling closeRunById.');
            }
            // verify required parameter 'runId' is not null or undefined
            if (runId === null || runId === undefined) {
                throw new RequiredError('runId','Required parameter runId was null or undefined when calling closeRunById.');
            }
            const localVarPath = '/projects/{project_id}/runs/{run_id}/close'
                .replace(`{${'project_id'}}`, encodeURIComponent(String(projectId)))
                .replace(`{${'run_id'}}`, encodeURIComponent(String(runId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create test run
         *
         * @summary Create test run
         * @param {string} projectId ID of project
         * @param {TestrunCreateTestRunDto} body Close Run Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRun(projectId: string, body: TestrunCreateTestRunDto, options: any = {}): FetchArgs {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling createRun.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createRun.');
            }
            const localVarPath = '/projects/{project_id}/runs'
                .replace(`{${'project_id'}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>'TestrunCreateTestRunDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || '');

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of test-run by projectID
         *
         * @summary Get list of test-run
         * @param {string} projectId ID of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRunsByProjectId(projectId: string, options: any = {}): FetchArgs {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getAllRunsByProjectId.');
            }
            const localVarPath = '/projects/{project_id}/runs'
                .replace(`{${'project_id'}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get run info by ID
         *
         * @summary Get run info by ID
         * @param {string} projectId ID of project
         * @param {number} runId ID of run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunById(projectId: string, runId: number, options: any = {}): FetchArgs {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getRunById.');
            }
            // verify required parameter 'runId' is not null or undefined
            if (runId === null || runId === undefined) {
                throw new RequiredError('runId','Required parameter runId was null or undefined when calling getRunById.');
            }
            const localVarPath = '/projects/{project_id}/runs/{run_id}'
                .replace(`{${'project_id'}}`, encodeURIComponent(String(projectId)))
                .replace(`{${'run_id'}}`, encodeURIComponent(String(runId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update test-run info by ID
         *
         * @summary Update test-run info
         * @param {string} projectId ID of project
         * @param {number} runId ID of run
         * @param {TestrunUpdateRunDto} body Update Run Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRunById(projectId: string, runId: number, body: TestrunUpdateRunDto, options: any = {}): FetchArgs {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling updateRunById.');
            }
            // verify required parameter 'runId' is not null or undefined
            if (runId === null || runId === undefined) {
                throw new RequiredError('runId','Required parameter runId was null or undefined when calling updateRunById.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateRunById.');
            }
            const localVarPath = '/projects/{project_id}/runs/{run_id}'
                .replace(`{${'project_id'}}`, encodeURIComponent(String(projectId)))
                .replace(`{${'run_id'}}`, encodeURIComponent(String(runId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>'TestrunUpdateRunDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || '');

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * RunsApi - functional programming interface
 *
 * @export
 */
export const RunsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Close test run
         *
         * @summary Close test run
         * @param {string} projectId ID of project
         * @param {number} runId ID of run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeRunById(projectId: string, runId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TestrunTestRun> {
            const localVarFetchArgs = RunsApiFetchParamCreator(configuration).closeRunById(projectId, runId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Create test run
         *
         * @summary Create test run
         * @param {string} projectId ID of project
         * @param {TestrunCreateTestRunDto} body Close Run Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRun(projectId: string, body: TestrunCreateTestRunDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TestrunTestRun> {
            const localVarFetchArgs = RunsApiFetchParamCreator(configuration).createRun(projectId, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get list of test-run by projectID
         *
         * @summary Get list of test-run
         * @param {string} projectId ID of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRunsByProjectId(projectId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TestrunTestRun[]> {
            const localVarFetchArgs = RunsApiFetchParamCreator(configuration).getAllRunsByProjectId(projectId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get run info by ID
         *
         * @summary Get run info by ID
         * @param {string} projectId ID of project
         * @param {number} runId ID of run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunById(projectId: string, runId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TestrunTestRun> {
            const localVarFetchArgs = RunsApiFetchParamCreator(configuration).getRunById(projectId, runId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Update test-run info by ID
         *
         * @summary Update test-run info
         * @param {string} projectId ID of project
         * @param {number} runId ID of run
         * @param {TestrunUpdateRunDto} body Update Run Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRunById(projectId: string, runId: number, body: TestrunUpdateRunDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TestrunTestRun> {
            const localVarFetchArgs = RunsApiFetchParamCreator(configuration).updateRunById(projectId, runId, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    };
};

/**
 * RunsApi - factory interface
 *
 * @export
 */
export const RunsApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Close test run
         *
         * @summary Close test run
         * @param {string} projectId ID of project
         * @param {number} runId ID of run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeRunById(projectId: string, runId: number, options?: any) {
            return RunsApiFp(configuration).closeRunById(projectId, runId, options)(fetch, basePath);
        },
        /**
         * Create test run
         *
         * @summary Create test run
         * @param {string} projectId ID of project
         * @param {TestrunCreateTestRunDto} body Close Run Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRun(projectId: string, body: TestrunCreateTestRunDto, options?: any) {
            return RunsApiFp(configuration).createRun(projectId, body, options)(fetch, basePath);
        },
        /**
         * Get list of test-run by projectID
         *
         * @summary Get list of test-run
         * @param {string} projectId ID of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRunsByProjectId(projectId: string, options?: any) {
            return RunsApiFp(configuration).getAllRunsByProjectId(projectId, options)(fetch, basePath);
        },
        /**
         * Get run info by ID
         *
         * @summary Get run info by ID
         * @param {string} projectId ID of project
         * @param {number} runId ID of run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunById(projectId: string, runId: number, options?: any) {
            return RunsApiFp(configuration).getRunById(projectId, runId, options)(fetch, basePath);
        },
        /**
         * Update test-run info by ID
         *
         * @summary Update test-run info
         * @param {string} projectId ID of project
         * @param {number} runId ID of run
         * @param {TestrunUpdateRunDto} body Update Run Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRunById(projectId: string, runId: number, body: TestrunUpdateRunDto, options?: any) {
            return RunsApiFp(configuration).updateRunById(projectId, runId, body, options)(fetch, basePath);
        },
    };
};

/**
 * RunsApi - object-oriented interface
 *
 * @export
 * @class RunsApi
 * @extends {BaseAPI}
 */
export class RunsApi extends BaseAPI {
    /**
     * Close test run
     *
     * @summary Close test run
     * @param {string} projectId ID of project
     * @param {number} runId ID of run
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    public closeRunById(projectId: string, runId: number, options?: any) {
        return RunsApiFp(this.configuration).closeRunById(projectId, runId, options)(this.fetch, this.basePath);
    }

    /**
     * Create test run
     *
     * @summary Create test run
     * @param {string} projectId ID of project
     * @param {TestrunCreateTestRunDto} body Close Run Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    public createRun(projectId: string, body: TestrunCreateTestRunDto, options?: any) {
        return RunsApiFp(this.configuration).createRun(projectId, body, options)(this.fetch, this.basePath);
    }

    /**
     * Get list of test-run by projectID
     *
     * @summary Get list of test-run
     * @param {string} projectId ID of project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    public getAllRunsByProjectId(projectId: string, options?: any) {
        return RunsApiFp(this.configuration).getAllRunsByProjectId(projectId, options)(this.fetch, this.basePath);
    }

    /**
     * Get run info by ID
     *
     * @summary Get run info by ID
     * @param {string} projectId ID of project
     * @param {number} runId ID of run
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    public getRunById(projectId: string, runId: number, options?: any) {
        return RunsApiFp(this.configuration).getRunById(projectId, runId, options)(this.fetch, this.basePath);
    }

    /**
     * Update test-run info by ID
     *
     * @summary Update test-run info
     * @param {string} projectId ID of project
     * @param {number} runId ID of run
     * @param {TestrunUpdateRunDto} body Update Run Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    public updateRunById(projectId: string, runId: number, body: TestrunUpdateRunDto, options?: any) {
        return RunsApiFp(this.configuration).updateRunById(projectId, runId, body, options)(this.fetch, this.basePath);
    }

}

/**
 * TestsApi - fetch parameter creator
 *
 * @export
 */
export const TestsApiFetchParamCreator = function(configuration?: Configuration) {
    return {
        /**
         * Create test by caseID
         *
         * @summary Create test in run
         * @param {number} projectId ID of project
         * @param {number} runId ID of run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestByCaseId(projectId: number, runId: number, options: any = {}): FetchArgs {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling createTestByCaseId.');
            }
            // verify required parameter 'runId' is not null or undefined
            if (runId === null || runId === undefined) {
                throw new RequiredError('runId','Required parameter runId was null or undefined when calling createTestByCaseId.');
            }
            const localVarPath = '/projects/{project_id}/runs/{run_id}/tests'
                .replace(`{${'project_id'}}`, encodeURIComponent(String(projectId)))
                .replace(`{${'run_id'}}`, encodeURIComponent(String(runId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get tests list by RunId
         *
         * @summary Get list of tests in test run
         * @param {number} runId ID of run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestsListByRunId(runId: number, options: any = {}): FetchArgs {
            // verify required parameter 'runId' is not null or undefined
            if (runId === null || runId === undefined) {
                throw new RequiredError('runId','Required parameter runId was null or undefined when calling getTestsListByRunId.');
            }
            const localVarPath = '/tests/list/run/:run_id'
                .replace(`{${'run_id'}}`, encodeURIComponent(String(runId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * TestsApi - functional programming interface
 *
 * @export
 */
export const TestsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create test by caseID
         *
         * @summary Create test in run
         * @param {number} projectId ID of project
         * @param {number} runId ID of run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestByCaseId(projectId: number, runId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ExecutionExecution> {
            const localVarFetchArgs = TestsApiFetchParamCreator(configuration).createTestByCaseId(projectId, runId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get tests list by RunId
         *
         * @summary Get list of tests in test run
         * @param {number} runId ID of run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestsListByRunId(runId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ExecutionExecution[]> {
            const localVarFetchArgs = TestsApiFetchParamCreator(configuration).getTestsListByRunId(runId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    };
};

/**
 * TestsApi - factory interface
 *
 * @export
 */
export const TestsApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Create test by caseID
         *
         * @summary Create test in run
         * @param {number} projectId ID of project
         * @param {number} runId ID of run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestByCaseId(projectId: number, runId: number, options?: any) {
            return TestsApiFp(configuration).createTestByCaseId(projectId, runId, options)(fetch, basePath);
        },
        /**
         * Get tests list by RunId
         *
         * @summary Get list of tests in test run
         * @param {number} runId ID of run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestsListByRunId(runId: number, options?: any) {
            return TestsApiFp(configuration).getTestsListByRunId(runId, options)(fetch, basePath);
        },
    };
};

/**
 * TestsApi - object-oriented interface
 *
 * @export
 * @class TestsApi
 * @extends {BaseAPI}
 */
export class TestsApi extends BaseAPI {
    /**
     * Create test by caseID
     *
     * @summary Create test in run
     * @param {number} projectId ID of project
     * @param {number} runId ID of run
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestsApi
     */
    public createTestByCaseId(projectId: number, runId: number, options?: any) {
        return TestsApiFp(this.configuration).createTestByCaseId(projectId, runId, options)(this.fetch, this.basePath);
    }

    /**
     * Get tests list by RunId
     *
     * @summary Get list of tests in test run
     * @param {number} runId ID of run
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestsApi
     */
    public getTestsListByRunId(runId: number, options?: any) {
        return TestsApiFp(this.configuration).getTestsListByRunId(runId, options)(this.fetch, this.basePath);
    }

}

/**
 * UsersApi - fetch parameter creator
 *
 * @export
 */
export const UsersApiFetchParamCreator = function(configuration?: Configuration) {
    return {
        /**
         * Get current user info
         *
         * @summary Get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        user(options: any = {}): FetchArgs {
            const localVarPath = '/users';
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user info by ID
         *
         * @summary Get user by ID
         * @param {number} userId ID of user to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userById(userId: number, options: any = {}): FetchArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling userById.');
            }
            const localVarPath = '/users/{user_id}'
                .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey('Authorization')
                    : configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * UsersApi - functional programming interface
 *
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get current user info
         *
         * @summary Get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        user(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserUser> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).user(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get user info by ID
         *
         * @summary Get user by ID
         * @param {number} userId ID of user to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userById(userId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserUser> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).userById(userId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    };
};

/**
 * UsersApi - factory interface
 *
 * @export
 */
export const UsersApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get current user info
         *
         * @summary Get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        user(options?: any) {
            return UsersApiFp(configuration).user(options)(fetch, basePath);
        },
        /**
         * Get user info by ID
         *
         * @summary Get user by ID
         * @param {number} userId ID of user to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userById(userId: number, options?: any) {
            return UsersApiFp(configuration).userById(userId, options)(fetch, basePath);
        },
    };
};

/**
 * UsersApi - object-oriented interface
 *
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Get current user info
     *
     * @summary Get current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public user(options?: any) {
        return UsersApiFp(this.configuration).user(options)(this.fetch, this.basePath);
    }

    /**
     * Get user info by ID
     *
     * @summary Get user by ID
     * @param {number} userId ID of user to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userById(userId: number, options?: any) {
        return UsersApiFp(this.configuration).userById(userId, options)(this.fetch, this.basePath);
    }

}

